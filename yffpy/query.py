__author__ = "Wren J. R. (uberfastman)"
__email__ = "wrenjr@yahoo.com"

import json
import logging
import os
import sys

from yahoo_oauth import OAuth2

from yffpy.models import YahooFantasyObject, Game, User, League, Standings, Settings, Player, StatCategories, Scoreboard
from yffpy.utils import reformat_json_list, unpack_data

logger = logging.getLogger(__name__)
# suppress yahoo-oauth debug logging
logging.getLogger("yahoo_oauth").setLevel(level=logging.INFO)


class YahooFantasyFootballQuery(object):
    """
    Yahoo fantasy football query to retrieve all types of FF data
    """

    def __init__(self, auth_dir, league_id, game_id=None, offline=False):
        """Instantiate a Yahoo query object for running queries against the Yahoo fantasy football REST API.

        :param auth_dir: location of both private.json (containing Yahoo dev app consumer_key and consumer_secret) and
            token.json (generated by OAuth2 three-legged handshake)
        :param league_id: league id of selected Yahoo fantasy league
        :param game_id: game id of selected Yahoo fantasy football game corresponding to a specific year, and defaulting
            to the current year
        :param offline: boolean to run in offline mode (ONLY WORKS IF ALL NEEDED YAHOO FANTASY FOOTBALL DATA HAS BEEN
            PREVIOUSLY SAVED LOCALLY USING data.py)
        """

        self.league_id = league_id
        self.game_id = game_id
        self.offline = offline

        self.league_key = None
        self.executed_queries = []

        if not self.offline:
            # load credentials
            with open(os.path.join(auth_dir, "private.json")) as yahoo_app_credentials:
                auth_info = json.load(yahoo_app_credentials)
            self._yahoo_consumer_key = auth_info["consumer_key"]
            self._yahoo_consumer_secret = auth_info["consumer_secret"]

            # load or create OAuth2 refresh token
            token_file_path = os.path.join(auth_dir, "token.json")
            if os.path.isfile(token_file_path):
                with open(token_file_path) as yahoo_oauth_token:
                    auth_info = json.load(yahoo_oauth_token)
            else:
                with open(token_file_path, "w") as yahoo_oauth_token:
                    json.dump(auth_info, yahoo_oauth_token)

            if "access_token" in auth_info.keys():
                self._yahoo_access_token = auth_info["access_token"]

            # complete OAuth2 3-legged handshake by either refreshing existing token or requesting account access and
            # returning a verification code to input to the command line prompt
            self.oauth = OAuth2(None, None, from_file=token_file_path)
            if not self.oauth.token_is_valid():
                self.oauth.refresh_access_token()

    def query(self, url, data_key_list, data_type_class=None):
        """Base query class to retrieve requested data from the Yahoo fantasy sports REST API.

        :param url: web url for desired Yahoo fantasy football data
        :param data_key_list: list of keys used to extract the specific data desired by the given query
        :param data_type_class: highest level data model type (if one exists for the specific retrieved data
        :return: object from yffpy/models.py, dict, or list (depending on query) with unpacked and parsed response data
        """

        if not self.offline:
            response = self.oauth.session.get(url, params={"format": "json"})
            logger.debug("Response (JSON): {}".format(response.json()))

            # handle if the yahoo query returns an error
            if response.json().get("error"):
                response_error_msg = response.json().get("error").get("description")
                logger.error("ATTEMPT TO RETRIEVE DATA FAILED WITH ERROR: \"{}\"".format(response_error_msg))
                sys.exit()
            else:
                raw_response_data = response.json().get("fantasy_content")

            if raw_response_data:
                logger.debug("Data fetched with query URL: {}".format(response.url))
                logger.debug("Response (Yahoo fantasy football data extracted from: \"fantasy_content\"): {}".format(
                    raw_response_data))
            else:
                logger.error("NO DATA FOUND WHEN ATTEMPTING EXTRACTION FROM FIELD \"fantasy_content\"")
                sys.exit()

            for i in range(len(data_key_list)):
                if isinstance(raw_response_data, list):
                    if isinstance(data_key_list[i], list):
                        reformatted = reformat_json_list(raw_response_data)
                        raw_response_data = [
                            {data_key_list[i][0]: reformatted[data_key_list[i][0]]},
                            {data_key_list[i][1]: reformatted[data_key_list[i][1]]}
                        ]
                    else:
                        raw_response_data = reformat_json_list(raw_response_data)[data_key_list[i]]
                else:
                    if isinstance(data_key_list[i], list):
                        raw_response_data = [
                            {data_key_list[i][0]: raw_response_data[data_key_list[i][0]]},
                            {data_key_list[i][1]: raw_response_data[data_key_list[i][1]]}
                        ]
                    else:
                        raw_response_data = raw_response_data.get(data_key_list[i])

            if raw_response_data:
                logger.debug("Response (Yahoo fantasy football data extracted from: {}): {}".format(data_key_list,
                                                                                                    raw_response_data))
            else:
                logger.error("NO DATA FOUND WHEN ATTEMPTING EXTRACTION FROM FIELDS {}".format(data_key_list))
                sys.exit()

            # unpack, parse, and assign data types to all retrieved data content
            unpacked = unpack_data(raw_response_data, YahooFantasyObject)
            logger.debug(
                "Unpacked and parsed JSON (Yahoo fantasy football data wth parent type: {}):\n{}".format(
                    data_type_class, unpacked))

            self.executed_queries.append({
                "url": response.url,
                "response_status_code": response.status_code,
                "response": response
            })

            # cast highest level of data to type corresponding to query (if type exists)
            return data_type_class(unpacked) if data_type_class else unpacked

        else:
            logger.error("CANNOT RUN YAHOO QUERY WHILE USING OFFLINE MODE!")

    def get_all_nfl_game_keys(self):
        """Retrieve all Yahoo Fantasy Football NFL games (1999 to present), sorted by season/year.

        :rtype: list
        :return: Game objects
            Example:
                [
                  {
                    "game": {
                      "code": "nfl",
                      "game_id": "50",
                      "game_key": "50",
                      "is_game_over": 1,
                      "is_offseason": 1,
                      "is_registration_over": 1,
                      "name": "Football",
                      "season": "1999",
                      "type": "full",
                      "url": "https://football.fantasysports.yahoo.com/archive/nfl/1999"
                    }
                  },
                  ...
                  ...
                ]
        """
        return sorted(self.query("https://fantasysports.yahooapis.com/fantasy/v2/games;game_codes=nfl", ["games"]),
                      key=lambda x: x.get("game").season)

    def get_game_key_by_season(self, season):
        """Retrieve specific game key for User define season.

        :param season: User defined season/year for which to retrieve the Yahoo game.
        :rtype: str
        :return: the game key for game specified by season.
            Example:
                "338"
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/games;game_codes=nfl;seasons=" + str(season),
            ["games"]).get("game").game_key

    def get_current_game_metadata(self):
        """Retrieve game metadata for current NFL season.

        :rtype: list
        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/game/nfl/metadata", ["game"], Game)

    def get_game_metadata_by_game_id(self, game_id):
        """

        :param game_id:
        :rtype: Game
        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/game/" + str(game_id) + "/metadata", ["game"], Game)

    def get_game_weeks_by_game_id(self, game_id):
        """

        :param game_id:
        :return:
        """
        return self.query("https://fantasysports.yahooapis.com/fantasy/v2/game/" + str(game_id) + "/game_weeks",
                          ["game", "game_weeks"])

    def get_game_stat_categories_by_game_id(self, game_id):
        """

        :param game_id:
        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/game/" + str(game_id) + "/stat_categories",
            ["game", "stat_categories"], StatCategories)

    def get_game_position_types_by_game_id(self, game_id):
        """

        :param game_id:
        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/game/" + str(game_id) + "/position_types",
            ["game", "position_types"])

    def get_game_roster_positions_by_game_id(self, game_id):
        """

        :param game_id:
        :return:
        """
        return sorted(self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/game/" + str(game_id) + "/roster_positions",
            ["game", "roster_positions"]), key=lambda x: x.get("roster_position").position)

    def get_league_key(self, season=None):
        """

        :param season:
        :return:
        """
        if not self.league_key:
            if season:
                return self.get_game_key_by_season(season) + ".l." + self.league_id
            elif self.game_id:
                return self.get_game_metadata_by_game_id(self.game_id).game_key + ".l." + self.league_id
            else:
                logger.warning(
                    "No game id or season/year provided, defaulting to current NFL fantasy football season.")
                return self.get_current_game_metadata().game_key + ".l." + self.league_id
        else:
            return self.league_key

    def get_current_user(self):
        """

        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/users;use_login=1/",
            ["users", "0", "user"], User)

    def get_user_games(self):
        """

        :return:
        """
        return sorted(self.query("https://fantasysports.yahooapis.com/fantasy/v2/users;use_login=1/games;codes=nfl/",
                                 ["users", "0", "user", "games"]), key=lambda x: x.get("game").season)

    def get_user_leagues_by_game_id(self, game_id):
        """

        :param game_id:
        :return:
        """
        return self.query("https://fantasysports.yahooapis.com/fantasy/v2/users;use_login=1/games;game_keys=" +
                          str(game_id) + "/leagues/", ["users", "0", "user", "games", "0", "game", "leagues"])

    def get_user_teams(self):
        """

        :return:
        """
        return sorted(self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/users;use_login=1/games;codes=nfl/teams/",
            ["users", "0", "user", "games"]), key=lambda x: x.get("game").season)

    def get_league_metadata(self):
        """

        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/league/" + self.get_league_key() + "/metadata", ["league"],
            League)

    def get_league_settings(self):
        """

        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/league/" + self.get_league_key() + "/settings",
            ["league", "settings"], Settings)

    def get_league_standings(self):
        """

        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/league/" + self.get_league_key() + "/standings",
            ["league", "standings"], Standings)

    def get_league_teams(self):
        """

        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/league/" + self.get_league_key() + "/teams",
            ["league", "teams"])

    def get_league_players(self):
        """

        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/league/" + self.get_league_key() + "/players",
            ["league", "players"])

    def get_league_draft_results(self):
        """

        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/league/" + self.get_league_key() + "/draftresults",
            ["league", "draft_results"])

    def get_league_transactions(self):
        """

        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/league/" + self.get_league_key() + "/transactions",
            ["league", "transactions"])

    def get_league_scoreboard_by_week(self, chosen_week):
        """

        :param chosen_week:
        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/league/" + self.get_league_key() + "/scoreboard;week=" +
            str(chosen_week), ["league", "scoreboard"], Scoreboard)

    def get_league_matchups_by_week(self, chosen_week):
        """

        :param chosen_week:
        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/league/" + self.get_league_key() + "/scoreboard;week=" +
            str(chosen_week), ["league", "scoreboard", "0", "matchups"])

    def get_team_metadata(self, team_id):
        """

        :param team_id:
        :return:
        """
        team_key = self.get_league_key() + ".t." + str(team_id)
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/team/" + str(team_key) + "/metadata", ["team"])

    def get_team_stats(self, team_id):
        """

        :param team_id:
        :return:
        """
        team_key = self.get_league_key() + ".t." + str(team_id)
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/team/" + str(team_key) + "/stats",
            ["team", "team_points"])

    def get_team_stats_by_week(self, team_id, chosen_week="current"):
        """

        :param team_id:
        :param chosen_week:
        :return:
        """
        team_key = self.get_league_key() + ".t." + str(team_id)
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/team/" + str(team_key) + "/stats;type=week;week=" +
            str(chosen_week), ["team", ["team_points", "team_projected_points"]])

    def get_team_standings(self, team_id):
        """

        :param team_id:
        :return:
        """
        team_key = self.get_league_key() + ".t." + str(team_id)
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/team/" + str(team_key) + "/standings",
            ["team", "team_standings"])

    def get_team_roster_by_week(self, team_id, chosen_week="current"):
        """

        :param team_id:
        :param chosen_week:
        :return:
        """
        team_key = self.get_league_key() + ".t." + str(team_id)
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/team/" + str(team_key) + "/roster;week=" +
            str(chosen_week), ["team", "roster"])

    def get_team_roster_player_stats_by_week(self, team_id, chosen_week="current"):
        """

        :param team_id:
        :param chosen_week:
        :return:
        """
        team_key = self.get_league_key() + ".t." + str(team_id)
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/team/" + str(team_key) + "/roster;week=" +
            str(chosen_week) + "/players/stats", ["team", "roster", "0", "players"])

    def get_team_draft_results(self, team_id):
        """

        :param team_id:
        :return:
        """
        team_key = self.get_league_key() + ".t." + str(team_id)
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/team/" + str(team_key) + "/draftresults",
            ["team", "draft_results"])

    def get_team_matchups(self, team_id):
        """

        :param team_id:
        :return:
        """
        team_key = self.get_league_key() + ".t." + str(team_id)
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/team/" + str(team_key) + "/matchups",
            ["team", "matchups"])

    def get_player_stats_by_week(self, player_key, chosen_week="current"):
        """

        :param player_key:
        :param chosen_week:
        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/league/" + self.get_league_key() + "/players;player_keys=" +
            str(player_key) + "/stats;type=week;week=" + str(chosen_week), ["league", "players", "0", "player"], Player)

    def get_player_ownership(self, player_key):
        """

        :param player_key:
        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/league/" + self.get_league_key() + "/players;player_keys=" +
            str(player_key) + "/ownership", ["league", "players", "0", "player"],
            Player)

    def get_player_percent_owned_by_week(self, player_key, chosen_week="current"):
        """

        :param player_key:
        :param chosen_week:
        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/league/" + self.get_league_key() + "/players;player_keys=" +
            str(player_key) + "/percent_owned;type=week;week=" + str(chosen_week), ["league", "players", "0", "player"],
            Player)

    def get_player_draft_analysis(self, player_key):
        """

        :param player_key:
        :return:
        """
        return self.query(
            "https://fantasysports.yahooapis.com/fantasy/v2/league/" + self.get_league_key() + "/players;player_keys=" +
            str(player_key) + "/draft_analysis",
            ["league", "players", "0", "player"], Player)
